import tkinter as tk

questions = {
     (1, 0): [("ü¶Åüëë", " –ö–æ—Ä–æ–ª—å –õ–µ–≤")],
    (2, 0): [("üöÄü§†ü¶ñ", "–ò—Å—Ç–æ—Ä–∏—è –∏–≥—Ä—É—à–µ–∫")],
    (3, 0): [("üè†üéàüë¥üèºüë¶", "–í–≤–µ—Ä—Ö")],
    (4, 0): [("üßû‚Äç‚ôÇÔ∏èüïåüêí", "–ê–ª–∞–¥–¥–∏–Ω")],
    (5, 0): [("üêâüëß‚öîÔ∏è", "–ú—É–ª–∞–Ω")],
    (1, 3): [("–ß—Ç–æ –Ω–æ—Å—è—Ç –µ–≤—Ä–µ–∏ –º—É–∂—á–∏–Ω—ã –Ω–∞ –≥–æ–ª–æ–≤–µ?", "–ö–∏–ø–∞"),("–ß—Ç–æ –∏–¥–µ—Ç —Ä–∞–Ω—å—à–µ: –®–∞–±–±–∞—Ç –∏–ª–∏ –ê–≤–¥–∞–ª–∞?", "–®–∞–±–±–∞—Ç"),("–°–∫–æ–ª—å–∫–æ —Ö–∞–ª –æ–±—ã—á–Ω–æ –Ω–∞ —à–∞–±–±–∞—Ç–Ω–µ–º —Å—Ç–æ–ª–µ?", "–î–≤–µ")],
    (2, 3): [("–ö–∞–∫ –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –ø–∏—Ç–∞–Ω–∏–µ —É –µ–≤—Ä–µ–µ–≤?", "–ö–æ—à—Ä—É—Ç"),("–ö—Ç–æ –≤–∑—Ä–æ—Å–ª–µ–µ—Ç —Ä–∞–Ω—å—à–µ, –º–∞–ª—å—á–∏–∫–∏ –∏–ª–∏ –¥–µ–≤–æ—á–∫–∏?", "–î–µ–≤–æ—á–∫–∏"),("–ö–∞–∫ –∑–≤–∞–ª–∏ –∂–µ–Ω—É –ê–¥–∞–º–∞?", "–ï–≤–∞")],
    (3, 3): [("–ö—Ç–æ —Å–ø–∞—Å –≤—Å–µ—Ö –∂–∏–≤–æ—Ç–Ω—ã—Ö –æ—Ç –ø–æ—Ç–æ–ø–∞?", "–ù–æ–π"),("–ö–∞–∫ –∑–≤–∞–ª–∏ –ø–µ—Ä–≤–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞?", "–ê–¥–∞–º"),("–ö–∞–∫ –∑–≤–∞–ª–∏ –ø–µ—Ä–≤–æ–≥–æ –µ–≤—Ä–µ—è?", "–ê–≤—Ä–∞–∞–º")],
    (4, 3): [("–í –∫–∞–∫–æ–π –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ –®–∞–±–±–∞—Ç?", "–í –ø—è—Ç–Ω–∏—Ü—É"),("–ö–æ–≥–¥–∞ –ø—Ä–æ–≤–æ–¥—è—Ç –∞–≤–¥–∞–ª—É?", "–í —Ç–µ—á–µ–Ω–∏–µ –¥–≤—É—Ö –¥–Ω–µ–π –ø–æ—Å–ª–µ –®–∞–±–±–∞—Ç–∞"),("–ö–∞–∫ –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è –≥–∏–º–Ω –ò–∑—Ä–∞–∏–ª—è?", "–•–∞—Ç–∏–∫–≤–∞")],
    (5, 3): [("–°–∫–æ–ª—å–∫–æ –±—ã–ª–æ –∫–æ–ª–µ–Ω –ò–∑—Ä–∞–∏–ª—è?", "12"),("–ö–∞–∫–æ–π –ï–≤—Ä–µ–π—Å–∫–∏–π —Ö—Ä–∞–º –±—ã–ª –ø–æ—Å–ª–µ–¥–Ω–∏–π?", "–í—Ç–æ—Ä–æ–π –•—Ä–∞–º, —Ö—Ä–∞–º –î–∞–≤–∏–¥–∞"),("–ö–∞–∫ –∑–≤–∞–ª–∏ –∫–æ—Ä–æ–ª—è –∏–∑ —Å–≤–∏—Ç–∫–∞ –≠—Å—Ç–µ—Ä, –∫–æ—Ç–æ—Ä–æ–≥–æ —Å—Ä–∞–≤–Ω–∏–≤–∞—é—Ç —Å –∏–Ω–¥—é–∫–æ–º?", "–ê—Ö–∞—à–≤–µ—Ä–æ—à")],
    (1, 2): [("–ö–∞–∫ –∑–æ–≤—É—Ç –º–∞–¥—Ä–∏—Ö–æ–≤ –Ω–∞—à–µ–π –∫–æ–º–∞–Ω–¥—ã?", "–Ø—Ä–∏–∫, –°–ª–∞–≤–∞, –°–æ–Ω—è, –ê—Ä–∏–∞–Ω–∞, –†–æ–±–µ—Ä—Ç–∞, –°–∏–º–∞, –ë–µ–∫–∞"),],
    (2, 2): [("–ó–∞–º–∞—Ç–∞–π—Ç–µ –ª—é–±–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –≤–∞—à–µ–π –∫–æ–º–∞–Ω–¥—ã –≤ —Ç—É–∞–ª–µ—Ç–∫—É –Ω–∞ —Å–∫–æ—Ä–æ—Å—Ç—å!", "–ú–æ–ª–æ–¥—Ü—ã!"),],
    (3, 2): [("–û —á–µ–º –±—ã–ª–∞ –ø—Ä–æ—à–ª–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞?", "–¢—É –±–∏ –®–≤–∞—Ç"),],
    (4, 2): [("–ö–∞–∫–∞—è –∫–æ–º–∞–Ω–¥–∞ –∞–∫—Ç–∏–≤–Ω–µ–µ —Å—Ç–∞–Ω—Ü—É–µ—Ç - –ø–æ–ª—É—á–∏—Ç –±–∞–ª–ª—ã", "–ú–æ–ª–æ–¥—Ü—ã!"),],
    (5, 2): [("–°–¥–µ–ª–∞–π—Ç–µ –∏–º–ø—Ä–æ–≤–∏–∑–∞—Ü–∏—é –ê–¥–∞–º, –ï–≤–∞ –∏ —è–±–ª–æ–∫–æ, –∫—Ç–æ-—Ç–æ –ê–¥–∞–º, –∫—Ç–æ-—Ç–æ –ï–≤–∞, –∫—Ç–æ-—Ç–æ —è–±–ª–æ–∫–æ", "–ú–æ–ª–æ–¥—Ü—ã!"),],   
}

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ç–µ–∫—É—â–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –∏ –æ—Ç–≤–µ—Ç–æ–≤
current_questions = []
question_index = 0
show_answer = False
category_buttons = {}
current_category = None

def show_next_question(event, popup_window):
    global question_index, show_answer
    # –ü—Ä–æ–≤–µ—Ä–∫–∞, –µ—Å–ª–∏ –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    if question_index < len(current_questions):
        if show_answer:
            popup_window.label.config(text=f"–û—Ç–≤–µ—Ç: {current_questions[question_index][1]}")
            question_index += 1
        else:
            popup_window.label.config(text=f"–í–æ–ø—Ä–æ—Å: {current_questions[question_index][0]}")
        show_answer = not show_answer
    else:
        popup_window.label.config(text="–í—Å–µ –≤–æ–ø—Ä–æ—Å—ã –ø—Ä–æ–π–¥–µ–Ω—ã!")
        hide_category_buttons(current_category)  # –ü—Ä—è—á–µ–º –∫–Ω–æ–ø–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, –∫–æ–≥–¥–∞ –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã –ø—Ä–æ–π–¥–µ–Ω—ã
        popup_window.after(2000, popup_window.destroy)  # –ó–∞–∫—Ä—ã—Ç—å –æ–∫–Ω–æ —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã

def hide_category_buttons(category):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∫–ª—é—á –≤ category_buttons
    if category in category_buttons:
        for button in category_buttons[category]:
            button.grid_forget()
    else:
        print(f"–ö–ª—é—á {category} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ category_buttons!")

def on_button_click(row, col, points):
    global current_questions, question_index, show_answer, current_category
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ—Ä—Ç–µ–∂ (row, col) –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    current_category = (row, col)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤–æ–ø—Ä–æ—Å—ã –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    if (row, col) in questions:
        current_questions = questions[(row, col)]
        question_index = 0
        show_answer = False

        # –û—Ç–∫—Ä—ã–≤–∞–µ–º –Ω–æ–≤–æ–µ –æ–∫–Ω–æ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤–æ–ø—Ä–æ—Å–æ–≤ –∏ –æ—Ç–≤–µ—Ç–æ–≤
        popup_window = tk.Toplevel()  # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ –æ–∫–Ω–æ
        popup_window.title(f"–í–æ–ø—Ä–æ—Å—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {row},{col}")
        popup_window.geometry("720x1280")

        # –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –æ–∫–Ω–æ –Ω–∞ —ç–∫—Ä–∞–Ω–µ
        window_width = 1280
        window_height = 400
        screen_width = popup_window.winfo_screenwidth()
        screen_height = popup_window.winfo_screenheight()
        x = (screen_width // 2) - (window_width // 2)
        y = (screen_height // 2) - (window_height // 2)
        popup_window.geometry(f"{window_width}x{window_height}+{x}+{y}")

        popup_window.configure(bg="#1E3F66")

        popup_window.label = tk.Label(popup_window, text=f"–í–æ–ø—Ä–æ—Å: {current_questions[question_index][0]}",
                                      font=("Arial", 20), bg="#1E3F66", fg="white")
        popup_window.label.pack(pady=20)
        
        popup_window.bind("<space>", lambda event, win=popup_window: show_next_question(event, win))  # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–±–µ–ª–∞ –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –≤–æ–ø—Ä–æ—Å–æ–≤
        
        # –ü–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, –∑–∞–∫—Ä–æ–µ—Ç—Å—è –æ–∫–Ω–æ
        show_next_question(None, popup_window)  # –ù–∞—á–∞—Ç—å —Å –ø–µ—Ä–≤–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞

def create_window():
    global label, category_buttons, frame, current_category
    root = tk.Tk()
    root.title("5x5 Grid Window - Marine Style")
    root.geometry("1920x1080")
    root.configure(bg="#1E3F66")  # –¢–µ–º–Ω–æ-—Å–∏–Ω–∏–π —Ñ–æ–Ω
    root.update_idletasks()

    window_width = 1920
    window_height = 1080
    screen_width = root.winfo_screenwidth()
    screen_height = root.winfo_screenheight()
    x = (screen_width // 2) - (window_width // 2)
    y = (screen_height // 2) - (window_height // 2)
    root.geometry(f"{window_width}x{window_height}+{x}+{y}")

    frame = tk.Frame(root, bg="#1E3F66")
    frame.place(relx=0.5, rely=0.5, anchor=tk.CENTER)

    button_colors = ["#A2D5F2", "#07689F"] 

    headers = ["–ü—É–∑—ã—Ä—å–∫–∏", "–û–±—Ä–∞—Ç–Ω–æ–µ —Ç–µ—á–µ–Ω–∏–µ", "–ï–≤–∞ —Å —Ö–≤–æ—Å—Ç–æ–º!", "–ê–¥–∞–º –≤ –æ–∫–µ–∞–Ω–µ", "–≠—Ç–æ –º–æ–∏ –Ω–æ–≥–∏?"]

    for j in range(5):
        label_header = tk.Label(frame, text=headers[j], width=20, height=4,
                                bg=button_colors[0], fg="#FF7F50", 
                                font=("Arial", 14, "bold"))
        label_header.grid(row=0, column=j, padx=5, pady=5)

    points = [100, 200, 300, 400, 500]  
    for i in range(1, 6): 
        for j in range(5):
            btn_text = f"{points[i-1]}" 
            btn = tk.Button(frame, text=btn_text, width=20, height=4,
                            bg=button_colors[i % 2], fg="white",
                            font=("Arial", 14, "bold"),
                            command=lambda i=i, j=j, points=points[i-1]: on_button_click(i, j, points))
            btn.grid(row=i, column=j, padx=5, pady=5)

            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤ —Å–ª–æ–≤–∞—Ä—å
            category_buttons[(i, j)] = category_buttons.get((i, j), []) + [btn]

    label = tk.Label(root, text="", font=("Arial", 22), bg="#1E3F66", fg="white")  
    label.pack(pady=20)

    root.mainloop()

if __name__ == "__main__":
    create_window()